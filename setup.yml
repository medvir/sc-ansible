---
#########################################################
# Set up dolina (NFS server and backing up with Tivoli) #
#########################################################

- hosts: servers
  remote_user: ubuntu
  become: yes

  tasks:

    - hostname:
        name: dolina

    - name: Ensure sysadmin SSH keys are authorized for user 'ubuntu'
      authorized_key: user="ubuntu" key="{{ item }}"
      with_file:
        - ~/.ssh/oct2016.key.pub

    - name: Ensure sysadmin SSH keys are authorized for user 'ubuntu'
      authorized_key: user="ubuntu" key="{{ item }}"
      with_file:
        - ~/.ssh/oct2016.key.pub

    - name: Mount bora on /rv_home
      mount:
        name: /rv_home
        src: /dev/vdb
        state: mounted
        fstype: ext4

    - name: Mount passat on /data
      mount:
        name: /data
        src: /dev/vdc
        state: mounted
        fstype: ext4

    - name: Mount passat on /analyses
      mount:
        name: /analyses
        src: /dev/vdd
        state: mounted
        fstype: ext4

    - name: Install required software
      apt:
        name={{ item }}
        state=present
        update_cache=yes
      with_items:
        - aptitude
        - nfs-common
        - nfs-kernel-server

    - name: Create ngs group
      tags:
        - passwd
      group:
        name={{item.name}}
        gid={{item.gid}}
        state=present
      with_items:
        - { name: 'ngs', gid: '1001' }

    # http://bencane.com/2012/05/27/acl-using-access-control-lists-on-linux/
    - name: Set acl such that newly created files have right permissions
      acl:
        name={{item}}
        entity=ngs
        etype=group
        permissions=rwx
        default=yes
        state=present
      with_items:
          - /data
          - /analyses

    - name: Set up /etc/exports
      template: src=exports.j2 dest=/etc/exports owner=root group=root

    - name: Restart nfs server
      service: name=nfs-kernel-server state=restarted


######################################################
# Set up timavo (computational server for our group) #
######################################################

- hosts: clients
  remote_user: ubuntu
  become: yes

  roles:
      - pre
      - seqtools
      - conda

  tasks:

    - hostname:
        name: timavo

    - name: Create mountable dir
      file: path=/rv_home state=directory mode=0755 owner=root group=root

    - name: Mount volumes from dolina with nfs
      mount:
        name={{ item }}
        src=172.23.98.199:{{ item }}
        state=mounted
        fstype=nfs
        opts=acl
      with_items:
        - /rv_home
        - /data
        - /analyses

    - name: Ensure sysadmin SSH keys are authorized for user 'ubuntu'
      authorized_key: user="ubuntu" key="{{ item }}"
      with_file:
        - ~/.ssh/oct2016.key.pub

    - name: Update apt-key to install mongo DB
      apt_key: keyserver=hkp://keyserver.ubuntu.com:80 id=EA312927

    - name: Create a list file for mongo DB
      lineinfile: dest=/etc/apt/sources.list.d/mongodb-org-3.2.list
                  line="deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse"
                  create=yes

    - name: Update repositories cache and install "mongdb" package
      apt:
        name: mongodb-org
        update_cache: yes

    #
    # SW not available from std Ubuntu repos installed from a script
    #

    - name: Install rmate standalone from https://github.com/aurora/rmate
      get_url:
        url: https://raw.githubusercontent.com/aurora/rmate/master/rmate
        dest: /usr/local/bin/rmate
        mode: a+x

    # Users

    - name: Create ngs group
      tags:
        - passwd
      group:
        name={{item.name}}
        gid={{item.gid}}
        state=present
      with_items:
        - { name: 'ngs', gid: '1001' }
        - { name: 'docker', gid: '117' }

    - name: Create accounts
      tags:
        - passwd
      user:
        name={{item.name}}
        group={{item.group}}
        groups={{item.groups}}
        home="/rv_home/{{item.name}}"
        shell={{item.shell}}
      with_items:
        - { name: 'ozagordi', group: 'ngs', groups: 'docker', shell: '/usr/bin/zsh' }
        - { name: 'mihuber',  group: 'ngs', groups: 'docker', shell: '/bin/bash' }
        - { name: 'merles',   group: 'ngs', groups: 'docker', shell: '/bin/bash' }
        - { name: 'vkufne',   group: 'ngs', groups: 'docker', shell: '/bin/bash' }
        - { name: 'stschmu',   group: 'ngs', groups: 'docker', shell: '/bin/bash' }
        - { name: 'sbsuser',   group: 'ngs', groups: 'docker', shell: '/bin/bash' }

    - name: Add ssh authorized keys
      authorized_key:
          user={{item.user}}
          key={{item.key}}
      with_items:
          - { user: 'ozagordi', key: "{{ lookup('file', 'keys/ozagordi') }}" }
          - { user: 'mihuber', key: "{{ lookup('file', 'keys/mihuber') }}" }
          - { user: 'merles', key: "{{ lookup('file', 'keys/merles') }}" }
          - { user: 'vkufne', key: "{{ lookup('file', 'keys/vkufne') }}" }
          - { user: 'stschmu', key: "{{ lookup('file', 'keys/stschmu') }}" }

    - name: Two keys for sbsuser because two MiSeq machines are used
      authorized_key:
          user: sbsuser
          state: present
          key: '{{ item }}'
      with_file:
        - keys/M01274
        - keys/M02081

#        - "{{ lookup('file', 'keys/M01274') }}"
#        - "{{ lookup('file', 'keys/M02081') }}"

    - name: Add directories to PATH and set umask
      blockinfile:
          dest: /rv_home/{{ item.user }}/.profile
          block: |
            export PATH=$PATH:/usr/local/edirect:/usr/local/vcflib:/opt/miniconda/bin
            umask 003
      with_items:
        - { user: "ozagordi" }
        - { user: "mihuber" }
        - { user: "merles" }
        - { user: "vkufne" }
        - { user: "stschmu" }

    - name: Change group of mounted directories
      file:
        path={{item}}
        owner=ubuntu
        group=ngs
        mode=0775
      with_items:
          - /data
          - /analyses

    - name: Samba configuration
      template:
        dest: /etc/samba/smb.conf
        src: smb.conf.j2
        validate: 'testparm -s %s'
      notify:
        - Restart Samba services
      tags: samba

  handlers:
    - name: Restart Samba services
      service:
        name=smbd state=restarted

    # http://bencane.com/2012/05/27/acl-using-access-control-lists-on-linux/
    # - name: Set acl such that newly created files have right permissions
    #   acl:
    #     name={{item}}
    #     entity=ngs
    #     etype=group
    #     permissions=rwx
    #     default=yes
    #     state=present
    #   with_items:
    #       - /data
    #       - /analyses
